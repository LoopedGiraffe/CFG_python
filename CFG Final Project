# Anna Grzybowska

# CFG Final Project

# in this project I have used some of ASCII art (modified by me) available: https://ascii.co.uk/art

# ____________________________________________________________________________________________________

# Prioritising - sketch idea  (MoSCoW)

# I chose to work on Top Trump'ish ;) simple game - with Star Wars theme (API)

# Must:
# - get random card for both player and computer
# - select one of the stats
# - stats comparison
# - scored higher value of chosen stat
# - at some point result who is the winner - for example after 3 rounds.

# Should:
# - feedback about results
# - show actual score for each of players after each round

# Could:
# - use input to take players name and use it later on in game
# - use some simple marks graphic (ascii art)

# Won't:
# - background music
# - advanced visualisations or effects

# Plan for improvement:
# - get available API ID list (fetch from available bunch of items id's)
# - optimize similar functions to be reused with variables and parameters set accordingly

# _________________________________________________________________________________________________

# 1. Generate a random number between available range to use as the ID number from chosen category
# 2. Using the Star Wars API get a Star Wars category based on its ID number
# 3. Create a dictionary that contains the returned Star Wars parameters (â˜… https://swapi.co/ )
# 4. Get a random item from chosen category for the player and another for their opponent
# 5. Ask the user which stat they want to use (from those which are available for particular category)
# 6. Compare the player's and opponent's Star Wars item on the chosen stat to decide who wins

# ________________________________________________________________________________________________

# Upgrade (Extension) done:

# Not only one option (category) available for the game but three
# For each category different stats are available
# Active input from player - like possibility to choose a name which is used along the game
# Different scenarios for different actions - with usage of ASCII art (to make this fun :)  )
# Time delay at some points to increase fun :)

# ________________________________________________________________________________________________

# Added some fun with data analysis:
# Writing score from each game in a file with highscores
# Reading data from this file
# Presenting sorted data of highscores (together with player name)
# Presenting statistics which are refreshed after each game.
# Statistics include: total, max, min, mean (rounded), standard deviation (rounded)

# _________________________________________________________________________________________________

# Hope you will enjoy :)

# _________________________________________________________________________________________________

# **********   MAY THE FORCE BE WITH YOU     **********

# ________________________________________________________________________________________________

import random
import requests
import time
import csv
import pandas as pandasForSortingCSV
import statistics

vehicle_id_available = [4, 6, 7, 8, 14, 16, 18, 19, 20, 24, 25, 26, 30, 33, 34, 35, 36, 37, 38, 42]
starship_id_available = [2, 3, 5, 9, 10, 11, 12, 13, 15, 17, 21, 22, 23, 27, 28, 29, 31, 32, 39, 40,
                         41, 43, 47, 48, 49, 52, 58, 59, 61, 63, 64, 65, 66, 68, 74, 75]


def random_vehicles():
    # Generate a random number between proper range
    vehicles_number = random.choice(vehicle_id_available)

    # Create a dictionary that contains the returned wanted properties
    url = 'https://swapi.dev/api/vehicles/{}/'.format(vehicles_number)
    response = requests.get(url)
    vehicles = response.json()
    return {
        'name': vehicles['name'],
        'l': vehicles['length'],
        's': vehicles['max_atmosphering_speed'],
        'c': vehicles['cargo_capacity']}


def random_planets():
    # Generate a random number between proper range
    planets_number = random.randint(1, 60)

    # Create a dictionary that contains the returned wanted properties
    url = 'https://swapi.dev/api/planets/{}/'.format(planets_number)
    response = requests.get(url)
    planets = response.json()
    return {
        'name': planets['name'],
        'r': planets['rotation_period'],
        'd': planets['diameter'],
        'p': planets['population'],
    }


def random_starships():
    # Generate a random number between proper range
    starships_number = random.choice(starship_id_available)

    # Create a dictionary that contains the returned wanted properties
    url = 'https://swapi.dev/api/starships/{}/'.format(starships_number)
    response = requests.get(url)
    starships = response.json()
    return {
        'name': starships['name'],
        'h': starships['hyperdrive_rating'],
        'l': starships['length'],
        'c': starships['cost_in_credits'],
    }


def run_vehicles():
    my_vehicle = random_vehicles()
    time.sleep(.5)
    print(f'You were given {my_vehicle['name']} \n \n ')
    time.sleep(1)
    stat_choice = input("Which stat do you want to use? \n "
                        "('l' - length, 's' - speed, 'c' - cargo)  \n \n ")

    if stat_choice == 'l' or stat_choice == 's' or stat_choice == 'c':

        time.sleep(.5)
        opponent_vehicle = random_vehicles()
        print(f' \n \n The opponent chose {opponent_vehicle['name']} \n \n')

        my_stat = float(my_vehicle[stat_choice])
        opponent_stat = float(opponent_vehicle[stat_choice])
        time.sleep(1)
        print(f'You have {my_stat}. \nOpponent has {opponent_stat}. \n \n')
        time.sleep(.5)
        if my_stat > opponent_stat:
            print('You Win!')
            player_score.append(1000)
            win()

        if my_stat < opponent_stat:
            print('You Lose!')
            opponent_score.append(1000)
            loose()

        if my_stat == opponent_stat:
            print('Draw!')
            opponent_score.append(300)
            player_score.append(300)
            draw()

    else:
        ewok()


def run_planets():
    my_planet = random_planets()
    time.sleep(.5)
    print(f'You were given {my_planet['name']} \n \n ')
    time.sleep(1)
    stat_choice = input("Which stat do you want to use? \n"
                        "('r' - rotation period, 'd' - diameter, 'p' - population')  \n \n ")

    if stat_choice == 'r' or stat_choice == 'd' or stat_choice == 'p':

        time.sleep(.5)
        opponent_planet = random_planets()
        print(f' \n \n The opponent chose {opponent_planet['name']} \n \n')

        my_stat = my_planet[stat_choice]
        opponent_stat = opponent_planet[stat_choice]
        time.sleep(1)
        print(f'You have {my_stat}. \nOpponent has {opponent_stat}. \n \n')
        time.sleep(.5)
        if my_stat == 'unknown' and opponent_stat == 'unknown':
            print(f"Both of you have unknown value of {stat_choice}. \n"
                  "Try Again!")
            opponent_score.append(5)
            player_score.append(5)

        if my_stat == 'unknown' and opponent_stat != 'unknown':
            print(f"You have unknown value of {stat_choice}. \n"
                  "You loose!")
            opponent_score.append(50)
            loose()

        if my_stat != 'unknown' and opponent_stat == 'unknown':
            print(f"Opponent has unknown value of {stat_choice}. \n"
                  "You Win!")
            player_score.append(50)
            win()

        if my_stat != 'unknown' and opponent_stat != 'unknown':

            if float(my_stat) > float(opponent_stat):
                print('You Win!')
                player_score.append(1000)
                win()

            if float(my_stat) < float(opponent_stat):
                print('You Lose!')
                opponent_score.append(1000)
                loose()

            if float(my_stat) == float(opponent_stat):
                print('Draw!')
                opponent_score.append(300)
                player_score.append(300)
                draw()

    else:
        ewok()


def run_starships():
    my_starship = random_starships()
    time.sleep(.5)
    print(f'You were given {my_starship['name']} \n \n ')
    time.sleep(1)
    stat_choice = input("Which stat do you want to use? \n"
                        "('h' - hyperdrive, 'l' - length, 'c' - cost')  \n \n ")

    if stat_choice == 'h' or stat_choice == 'l' or stat_choice == 'c':

        time.sleep(.5)
        opponent_starship = random_starships()
        print(f' \n \n The opponent chose {opponent_starship['name']} \n \n')

        my_stat = (my_starship[stat_choice])
        opponent_stat = (opponent_starship[stat_choice])
        time.sleep(1)
        print(f'You have {my_stat}. \nOpponent has {opponent_stat}. \n \n')
        time.sleep(.5)

        if my_stat == 'unknown' and opponent_stat == 'unknown':
            print(f"Both of you have unknown value of {stat_choice}. \n"
                  "Try Again!")
            opponent_score.append(5)
            player_score.append(5)

        if my_stat == 'unknown' and opponent_stat != 'unknown':
            print(f"You have unknown value of {stat_choice}. \n"
                  "You loose!")
            opponent_score.append(50)
            loose()

        if my_stat != 'unknown' and opponent_stat == 'unknown':
            print(f"Opponent has unknown value of {stat_choice}. \n"
                  "You Win!")
            player_score.append(50)
            win()

        if my_stat != 'unknown' and opponent_stat != 'unknown':
            if float(my_stat) > float(opponent_stat):
                print('You Win!')
                player_score.append(1000)
                win()

            if float(my_stat) < float(opponent_stat):
                print('You Lose!')
                opponent_score.append(1000)
                loose()

            if float(my_stat) == float(opponent_stat):
                print('Draw!')
                opponent_score.append(300)
                player_score.append(300)
                draw()

    else:
        ewok()


def ewok():
    print("Writing skills of an Ewok!\n"
          "Try again!\n")
    print("""
            ,-._____,-.
           (_c       c_)
            /  e-o-e  |
           (  (._|_,)  )
            >._`---'_,<
          ,'/  `---'  |`.
        ,' /           | `.
       (  (             )  )
        `-'|           /`-'
           |`-._____.-'|
           |     Y     |
           /     |     |
          (      |      )
      """)


def loose():
    print('''
     .... NO! ...                  ... MNO! ...
   ..... MNO!! ...................... MNNOO! ...
 ..... MMNO! ......................... MNNOO!! .
..... MNOONNOO!   MMMMMMMMMMPPPOII!   MNNO!!!! .
 ... !O! NNO! MMMMMMMMMMMMMPPPOOOII!! NO! ....
    ...... ! MMMMMMMMMMMMMPPPPOOOOIII! ! ...
   ........ MMMMMMMMMMMMPPPPPOOOOOOII!! .....
   ........ MMMMMOOOOOOPPPPPPPPOOOOMII! ...
    ....... MMMMM..    OPPMMP    .,OMI! ....
     ...... MMMM::   o.,OPMP,.o   ::I!! ...
         .... NNM:::.,,OOPM!P,.::::!! ....
          .. MMNNNNNOOOOPMO!!IIPPO!!O! .....
         ... MMMMMNNNNOO:!!:!!IPPPPOO! ....
           .. MMMMMNNOOMMNNIIIPPPOO!! ......
          ...... MMMONNMMNNNIIIOO!..........
       ....... MN MOMMMNNNIIIIIO! OO ..........
    ......... MNO! IiiiiiiiiiiiI OOOO ...........
  ...... NNN.MNO! . O!!!!!!!!!O . OONO NO! ........
   .... MNNNNNO! ...OOOOOOOOOOO .  MMNNON!........
   ...... MNNNNO! .. PPPPPPPPP .. MMNON!........
      ...... OO! ................. ON! .......
         ................................
    ''')


def draw():
    print('''
             _,aadZZZbaa,_        _,aad888baa,_
     _,dZZZZZZZZZZZZZZZa    ,d88888888888888b,_
   ,dZZZZZZZZZZZZZZZZZZZZa,d8888888888888888888b,
  dZZZZZZZZZZZZZZZZZZZZZZZb"888888888888888888888b
 ZZZZZZZZZZZZZZZZZZZZZZZZZZZb"888888888888888888888
dZZZZZZZZZZZZZZZZZP'`YZZZZZZZZb"8888888888888888888b
ZZZZZZZZZZZZZZZZP'd88b`YZZZZZZZZb"888888888888888888
YZZZZZZZZZZZZZP'd888888b`YZZZZZZZ 88888888888888888P
 YZZZZZZZZZZP'd8888888888b`YYYYY'd8888888888888888P
  YZZZZZZZP'd888888888888888888888888PYYY88888888P
   `ZZZZP'd888888888888888888888888"dZZZb"88888P'
     YP'd8888888P'd8888888888888"db"ZZZZZZb"88"
     ,d8888888P'd8888888888888"dZZZb"ZZZZZZZb"
    d8888888P'd888888P'd888"db"ZZZZZZb"ZZZZZZZb
    Y88888P'd888888P'd888"dZZZb"ZZZZZZZb"ZZZZP'
     `"YP'd888888P'd88"db"ZZZZZZb"ZZZZZZZb"P'
         Y88888P'd88"dZZZb"ZZZZZZZb"ZZZZZZP
          `"YP'd8888,YZZZZZb"ZZZZZZZb"ZZP'
              Y88888Pb"ZZZZZZb"ZZZZZZP
               `"YP'd88b"ZZZZZZb"ZZP'          
                   Y88888`ZZZZZZP               
                    `"YP' `YZZP'
                    ''')


def win():
    print('''

         .                      .
         .                      ;
         :                  - --+- -
         !           .          !
         |        .             .
         |_         +
      ,  | `.
--- --+-<#>-+- ---  --  -
      `._|_,'
         T
         |
         !
         :         . : 
         .       *
         ''')


def read_data():
    datascore = []
    with open('highscore.csv', 'r') as scores_csv:
        spreadsheet = csv.DictReader(scores_csv)
        for row in spreadsheet:
            datascore.append(row)
        return datascore


def fun_with_data():
    datascore = read_data()
    scores = []

    for row in datascore:
        score = int(row['score'])
        scores.append(score)

    total = sum(scores)
    maks = max(scores)
    minim = min(scores)
    mean_score = statistics.mean(scores)
    standdev = statistics.stdev(scores, xbar=None)

    print('\n \n Some Statistics: \n \n ')
    print('Total score: {}'.format(total))
    print(f'max score: {maks}')
    print(f'minimum score: {minim}')
    print(f'mean value: {round(mean_score, 3)}')
    print(f'standard deviation: {round(standdev, 3)}')


player_name = input('\n \n Enter Your name: \n \n')
time.sleep(.5)
print(f"\n \n \n Hello there! General {player_name} ! \n \n \n ")
time.sleep(.5)
print("""
.        .          .    .    .            .            .                   .
               .               ..       .       .   .             .
 .      .     T h i s   i s   t h e   g a l a x y   o f   . . .             .
                     .              .       .                    .      .
             .               .    .          .              .   .         .
               _________________      ____         __________
 .       .    |888888888888888888    |8888|    .  |8888888888|
     .       |8888888888888888888   |888888|      |88888888888|     .     .
             |8888|    |888|       |888||888|     |888|___>888|
           .  |8888|   |888|      |888|__|888|  . |888888888|               .
 .     ________>8888|  |888| .   |888888888888|   |888||8888|_______    .
      |888888888888|   |888|    |88888888888888|  |888| |88888888888|
      |88888888888|    |888|   |8888|      |8888| |888|  |8888888888|    .
  .     ____    __  . _____   ____      .  __________   .  _________
       |8888|  |88|  |8888|  |8888|       |8888888888|    |888888888|      .
        |8888||8888||8888|  |888888|      |88888888888|  |8888888888|  .
         |88888888888888|  |888||888| .   |888|___>888|  |8888|
   .      |888888888888|  |888|__|888|    |8888888888|.   |8888|            +
           |8888||8888|  |888888888888|   |888||8888|______>8888|   .
            |88|  |88|  |88888888888888|  |888| |88888888888888|          .
 .       .   ||    ||  |8888|      |8888| |888|  |888888888888|  
                               .                                        .
     .                           .         .               .                 .""")

time.sleep(1)
print(f"\n \nA battle has begun in which You, {player_name} have to play the role")
time.sleep(.5)
start_player_choice = input(f" \n \nDear {player_name} are you ready to start our journey?\n \n \n "
                            f"Print 'Y' for YES or 'N' for NO:  \n \n   ")
start_player = start_player_choice.lower()  # to assure flow without need to use capitalized letters
time.sleep(.5)
if start_player_choice == 'y':
    print(f"\n Game has begun! \n \n  ")
    time.sleep(1)
    count_round = 0
    player_score = []
    opponent_score = []

    while count_round < 3:
        count_round = count_round + 1
        print(f'\nROUND: {count_round} of 3')
        time.sleep(.5)

        print(f"\n \n General {player_name} it is time "
              f"to choose in which category this conquest will take place. \n \n ")

        category_player_choice = int(input(f" Press  '1'  for  VEHICLES \n "
                                           f"Press  '2'  for  PLANETS \n "
                                           f"Press  '3'  for  SHIPS \n \n "
                                           f"What is your choice? \n \n "))

        if 1 <= category_player_choice <= 3:

            if category_player_choice == 1:
                print(f"Game category - VEHICLES  \n \n")

                # gameplay for 1
                run_vehicles()

            if category_player_choice == 2:
                print(f"Game category - PLANETS  \n \n")

                # gameplay for 2
                run_planets()

            if category_player_choice == 3:
                print(f"Game category - SHIPS  \n \n")

                # gameplay for 3
                run_starships()

        else:
            ewok()

        print(f'General {player_name} score: {sum(player_score)} \n'
              f'Opponent score: {sum(opponent_score)}')

    final_player_score = sum(player_score)
    final_opponent_score = sum(opponent_score)
    time.sleep(1)
    if final_player_score > final_opponent_score:
        print(f'\n \nGeneral {player_name} \nYour total score is: {final_player_score} \n'
              f'\nOpponent total score: {final_opponent_score} \n \n \n'
              '*****  MAY THE FORCE BE WITH YOU  *****')
        win()

    elif final_player_score < final_opponent_score:
        print(f'\n \n General {player_name} \nYour total score is: {final_player_score} \n'
              f'\nOpponent total score: {final_opponent_score} \n \n \n'
              '*****  YOU LOOSE  *****')
        loose()

    elif final_player_score == final_opponent_score:
        print(f'\n \nGeneral {player_name} \nYour total score is: {final_player_score} \n'
              f'\nOpponent total score: {final_opponent_score} \n \n \n'
              '*****  FORCE IS IN BALANCE *****')
        draw()

    field_names = ['name', 'score']
    data = [
        {'name': player_name, 'score': final_player_score}
    ]
    with open('highscore.csv', 'a', newline='') as csv_file:
        spreadsheet = csv.DictWriter(csv_file, fieldnames=field_names)
        spreadsheet.writerows(data)

    csvData = pandasForSortingCSV.read_csv("highscore.csv")
    csvData.sort_values(["score"],
                        axis=0,
                        ascending=[False],
                        inplace=True)
    print('\n \n *****  Best Player Score Ranking  ***** \n \n')
    print(csvData)

    fun_with_data()


elif start_player_choice == 'n':
    print(f"OK Dude! Go hang out with Jabba !!!")
    print("""
        ______
    (__  __)
      |  |
      |  |________........--------........________                  __
      |  |||                                      ~~~~~~~~------~~~~  ||
      |  | ||                             o                           ||
      |  |  ||                         o^/||^o                        ||
      |  |  ||                     o|*`'.||/.'`*/o                    ||
      |  |  ||                      |||||||//////                     ||
      |  |  ||                       {><><@><><}                      ||
      |  |  ||                       ).--._.--.(                      ||
      |  |  ||                       ( O     O )                      ||
      |  |  ||:::::::::::::::::      /   . .   |       :::::::::::::::||
      |  |  ||:::::::::::::::::     .`._______.'.      :::::::::::::::||
      |  |  ||:::::::::::::::::    /(    |_/    )|     :::::::::::::::||
      |  |  ||:::::::::::::::::: _/  |  |   /  /  |_ :::::::::::::::::||
      |  |  ||::::::::::::::::::::::::::::::::::::::::::::::::::::::::||

    """)
else:
    ewok()
